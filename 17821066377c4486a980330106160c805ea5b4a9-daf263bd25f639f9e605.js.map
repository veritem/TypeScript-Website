{"version":3,"sources":["webpack://typescriptlang-org/../node_modules/babel-loader/lib/node_modules/ts-debounce/dist/src/index.js","webpack://typescriptlang-org/./src/lib/playgroundURLs.ts","webpack://typescriptlang-org/../src/utils.ts","webpack://typescriptlang-org/../src/index.ts","webpack://typescriptlang-org/../src/validation.ts","webpack://typescriptlang-org//home/runner/work/TypeScript-Website/TypeScript-Website/packages/ts-twoslasher/dist|sync|/^.*th$/","webpack://typescriptlang-org/../typescript-vfs/dist|sync"],"names":["exports","i","o","e","n","t","a","isImmediate","r","maxWait","u","Date","now","c","v","slice","call","arguments","this","apply","clearTimeout","setTimeout","cancel","getPlaygroundUrls","sandboxRoot","withPrefix","playgroundRoot","parsePrimitive","value","type","hasLocalStorage","hasProcess","localStorage","process","console","TwoslashError","message","title","description","recommendation","code","highlights","queries","nextContentOffset","contentOffset","removedLines","line","codeLines","moveForward","stripLine","log","highlightMatch","queryMatch","removePrettierIgnoreMatch","completionsQuery","start","kind","offset","text","docs","length","result","optMap","key","keys","Array","opt","name","opts","elementType","strings","getOptionValueFromMap","ts","booleanConfigRegexp","defaultHandbookOptions","errors","noErrors","showEmit","showEmittedFile","noStaticSemanticInfo","emit","noErrorValidation","twoslasher","extension","options","require","originalCode","safeExtension","types","map","js","javascript","typescript","tsx","jsx","json","jsn","Object","typesToExtension","defaultFileName","strict","target","allowJs","validateInput","cleanMarkdownEscaped","tags","match","valuedConfigRegexp","customTags","annotation","filterCustomTags","handbookOptions","filterHandbookOptions","compilerOptions","setOption","filterCompilerOptions","getRoot","path","pa","rootPath","useFS","vfs","system","createSystem","createFSBackedSystem","fsRoot","env","createVirtualTypeScriptEnvironment","ls","partialQueries","splitTwoslashCodeInfoFiles","nc","file","filetype","filename","allowJSON","sourceFiles","newFileCode","updates","filterHighlightLines","lspedQueries","sourceFile","position","q","quickInfo","dp","d","completions","word","str","pos","String","Number","left","right","startPos","getClosestWord","lastDot","prefix","completionPrefix","newEditedFileCode","allCodeLines","filenames","f","output","errs","staticQuickInfos","source","fileContentStartIndexInModifiedFile","linesAbove","textSpans","checkChildren","node","child","span","getIdentifierTextSpans","identifier","targetString","burnerSourceFile","character","completionsPrefix","relevantErrors","vfsRoot","inErrsButNotFoundInTheHeader","errorsFound","Set","errorsToShow","codeToAdd","missing","filesToErrors","noFiles","fileRef","existing","showDiagnostics","diags","msg","innerDiags","filepath","allMessages","newErr","validateCodeForErrors","err","codeWhereErrorLives","renderedMessage","id","category","emitFilename","emitSourceFilename","emitSource","allFiles","playgroundURL","lzstring","cutString","cutIndex","lineOffset","info","s","highlight","lines","nameForFile","currentFileContent","fileMap","root","debugLog","sys","rootFiles","customTransformers","mergedCompilerOpts","defaultCompilerOptions","fileNames","createVirtualCompilerHost","compilerHost","updateFile","fileVersions","projectVersion","languageServiceHost","getProjectVersion","getCompilationSettings","getCustomTransformers","getScriptFileNames","getScriptSnapshot","fileName","contents","getScriptVersion","writeFile","createVirtualLanguageServiceHost","languageService","diagnostics","getSourceFile","createFile","prevSourceFile","prevFullContents","prevTextSpan","optPrevTextSpan","newText","newSourceFile","newLength","content","knownLibFilesForCompilerOptions","array","lib","files","targetToCut","matches","targetCutIndex","indexesForCutting","libCutIndex","getMax","current","finalCutIndex","Math","createDefaultMapFromCDN","fetchlike","fetcher","storelike","storer","fsMap","cache","Promise","cacheKey","resp","notImplemented","methodName","audit","args","res","fn","smallres","esModuleInterop","module","suppressOutputPathCheck","skipLibCheck","skipDefaultLibCheck","moduleResolution","NodeJs","libize","createDirectory","directoryExists","directory","exit","fileExists","getCurrentDirectory","getDirectories","getExecutingFilePath","readDirectory","readFile","resolvePath","newLine","useCaseSensitiveFileNames","write","_projectRoot","requirePath","nodeSys","tsLib","tsLibName","libs","getCanonicalFileName","getDefaultLibFileName","getNewLine","alreadyExists","webpackEmptyContext","req","Error","resolve"],"mappings":"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","file":"17821066377c4486a980330106160c805ea5b4a9-daf263bd25f639f9e605.js","sourcesContent":["exports.debounce = function (i, o, e) {\n  var n, t;\n  void 0 === o && (o = 50), void 0 === e && (e = {});\n  var a = null != (n = e.isImmediate) && n,\n      r = e.maxWait,\n      u = Date.now();\n\n  function c() {\n    if (void 0 !== r) {\n      var i = Date.now() - u;\n      if (i + o >= r) return r - i;\n    }\n\n    return o;\n  }\n\n  var v = function v() {\n    var o = [].slice.call(arguments),\n        e = this,\n        n = function n() {\n      t = void 0, u = Date.now(), a || i.apply(e, o);\n    },\n        r = a && void 0 === t;\n\n    void 0 !== t && clearTimeout(t), t = setTimeout(n, c()), r && i.apply(e, o);\n  };\n\n  return v.cancel = function () {\n    void 0 !== t && clearTimeout(t);\n  }, v;\n};","import { withPrefix } from \"gatsby\"\n\nexport const getPlaygroundUrls = () => {\n  // This will get switched out in CI by:\n  // scripts/cacheBustPlayground.mjs\n\n  // This should always be a single slash string in the codebase: \"/\"\n  const commitPrefix = \"/a4fb7af/\"\n\n  return {\n    sandboxRoot: withPrefix(`/js${commitPrefix}sandbox`),\n    playgroundRoot: withPrefix(`/js${commitPrefix}playground`),\n  }\n}\n","import { TwoslashError } from \"./\"\n\nexport function escapeHtml(text: string) {\n  return text.replace(/</g, \"&lt;\")\n}\n\nexport function strrep(text: string, count: number) {\n  let s = \"\"\n  for (let i = 0; i < count; i++) {\n    s += text\n  }\n  return s\n}\n\nexport function textToAnchorName(text: string) {\n  return text\n    .toLowerCase()\n    .replace(/ /g, \"-\")\n    .replace(/`|#|\\//g, \"\")\n}\n\nexport function fileNameToUrlName(s: string) {\n  return s.replace(/ /g, \"-\").replace(/#/g, \"sharp\").toLowerCase()\n}\n\nexport function parsePrimitive(value: string, type: string): any {\n  switch (type) {\n    case \"number\":\n      return +value\n    case \"string\":\n      return value\n    case \"boolean\":\n      return value.toLowerCase() === \"true\" || value.length === 0\n  }\n\n  throw new TwoslashError(\n    `Unknown primitive value in compiler flag`,\n    `The only recognized primitives are number, string and boolean. Got ${type} with ${value}.`,\n    `This is likely a typo.`\n  )\n}\n\nexport function cleanMarkdownEscaped(code: string) {\n  code = code.replace(/¨D/g, \"$\")\n  code = code.replace(/¨T/g, \"~\")\n  return code\n}\n\nexport function typesToExtension(types: string) {\n  const map: Record<string, string> = {\n    js: \"js\",\n    javascript: \"js\",\n    ts: \"ts\",\n    typescript: \"ts\",\n    tsx: \"tsx\",\n    jsx: \"jsx\",\n    json: \"json\",\n    jsn: \"json\",\n  }\n\n  if (map[types]) return map[types]\n\n  throw new TwoslashError(\n    `Unknown TypeScript extension given to Twoslash`,\n    `Received ${types} but Twoslash only accepts: ${Object.keys(map)} `,\n    ``\n  )\n}\n\nexport function getIdentifierTextSpans(ts: typeof import(\"typescript\"), sourceFile: import(\"typescript\").SourceFile) {\n  const textSpans: { span: import(\"typescript\").TextSpan; text: string }[] = []\n  checkChildren(sourceFile)\n  return textSpans\n\n  function checkChildren(node: import(\"typescript\").Node) {\n    ts.forEachChild(node, child => {\n      if (ts.isIdentifier(child)) {\n        const start = child.getStart(sourceFile, false)\n        textSpans.push({ span: ts.createTextSpan(start, child.end - start), text: child.getText(sourceFile) })\n      }\n      checkChildren(child)\n    })\n  }\n}\n\nexport function stringAroundIndex(string: string, index: number) {\n  const arr = [\n    string[index - 3],\n    string[index - 2],\n    string[index - 1],\n    \">\",\n    string[index],\n    \"<\",\n    string[index + 1],\n    string[index + 2],\n    string[index + 3],\n  ]\n  return arr.filter(Boolean).join(\"\")\n}\n\n/** Came from https://ourcodeworld.com/articles/read/223/how-to-retrieve-the-closest-word-in-a-string-with-a-given-index-in-javascript */\nexport function getClosestWord(str: string, pos: number) {\n  // Make copies\n  str = String(str)\n  pos = Number(pos) >>> 0\n\n  // Search for the word's beginning and end.\n  var left = str.slice(0, pos + 1).search(/\\S+$/),\n    right = str.slice(pos).search(/\\s/)\n\n  // The last word in the string is a special case.\n  if (right < 0) {\n    return {\n      word: str.slice(left),\n      startPos: left,\n    }\n  }\n  // Return the word, using the located bounds to extract it from the string.\n  return {\n    word: str.slice(left, right + pos),\n    startPos: left,\n  }\n}\n","type System = import(\"typescript\").System\ntype CompilerOptions = import(\"typescript\").CompilerOptions\ntype CustomTransformers = import(\"typescript\").CustomTransformers\ntype LanguageServiceHost = import(\"typescript\").LanguageServiceHost\ntype CompilerHost = import(\"typescript\").CompilerHost\ntype SourceFile = import(\"typescript\").SourceFile\ntype TS = typeof import(\"typescript\")\n\nlet hasLocalStorage = false\ntry {\n  hasLocalStorage = typeof localStorage !== `undefined`\n} catch (error) {}\n\nconst hasProcess = typeof process !== `undefined`\nconst shouldDebug = (hasLocalStorage && localStorage.getItem(\"DEBUG\")) || (hasProcess && process.env.DEBUG)\nconst debugLog = shouldDebug ? console.log : (_message?: any, ..._optionalParams: any[]) => \"\"\n\nexport interface VirtualTypeScriptEnvironment {\n  sys: System\n  languageService: import(\"typescript\").LanguageService\n  getSourceFile: (fileName: string) => import(\"typescript\").SourceFile | undefined\n  createFile: (fileName: string, content: string) => void\n  updateFile: (fileName: string, content: string, replaceTextSpan?: import(\"typescript\").TextSpan) => void\n}\n\n/**\n * Makes a virtual copy of the TypeScript environment. This is the main API you want to be using with\n * @typescript/vfs. A lot of the other exposed functions are used by this function to get set up.\n *\n * @param sys an object which conforms to the TS Sys (a shim over read/write access to the fs)\n * @param rootFiles a list of files which are considered inside the project\n * @param ts a copy pf the TypeScript module\n * @param compilerOptions the options for this compiler run\n * @param customTransformers custom transformers for this compiler run\n */\n\nexport function createVirtualTypeScriptEnvironment(\n  sys: System,\n  rootFiles: string[],\n  ts: TS,\n  compilerOptions: CompilerOptions = {},\n  customTransformers?: CustomTransformers\n): VirtualTypeScriptEnvironment {\n  const mergedCompilerOpts = { ...defaultCompilerOptions(ts), ...compilerOptions }\n\n  const { languageServiceHost, updateFile } = createVirtualLanguageServiceHost(\n    sys,\n    rootFiles,\n    mergedCompilerOpts,\n    ts,\n    customTransformers\n  )\n  const languageService = ts.createLanguageService(languageServiceHost)\n  const diagnostics = languageService.getCompilerOptionsDiagnostics()\n\n  if (diagnostics.length) {\n    const compilerHost = createVirtualCompilerHost(sys, compilerOptions, ts)\n    throw new Error(ts.formatDiagnostics(diagnostics, compilerHost.compilerHost))\n  }\n\n  return {\n    // @ts-ignore\n    name: \"vfs\",\n    sys,\n    languageService,\n    getSourceFile: fileName => languageService.getProgram()?.getSourceFile(fileName),\n\n    createFile: (fileName, content) => {\n      updateFile(ts.createSourceFile(fileName, content, mergedCompilerOpts.target!, false))\n    },\n    updateFile: (fileName, content, optPrevTextSpan) => {\n      const prevSourceFile = languageService.getProgram()!.getSourceFile(fileName)\n      if (!prevSourceFile) {\n        throw new Error(\"Did not find a source file for \" + fileName)\n      }\n      const prevFullContents = prevSourceFile.text\n\n      // TODO: Validate if the default text span has a fencepost error?\n      const prevTextSpan = optPrevTextSpan ?? ts.createTextSpan(0, prevFullContents.length)\n      const newText =\n        prevFullContents.slice(0, prevTextSpan.start) +\n        content +\n        prevFullContents.slice(prevTextSpan.start + prevTextSpan.length)\n      const newSourceFile = ts.updateSourceFile(prevSourceFile, newText, {\n        span: prevTextSpan,\n        newLength: content.length,\n      })\n\n      updateFile(newSourceFile)\n    },\n  }\n}\n\n/**\n * Grab the list of lib files for a particular target, will return a bit more than necessary (by including\n * the dom) but that's OK\n *\n * @param target The compiler settings target baseline\n * @param ts A copy of the TypeScript module\n */\nexport const knownLibFilesForCompilerOptions = (compilerOptions: CompilerOptions, ts: TS) => {\n  const target = compilerOptions.target || ts.ScriptTarget.ES5\n  const lib = compilerOptions.lib || []\n\n  const files = [\n    \"lib.d.ts\",\n    \"lib.dom.d.ts\",\n    \"lib.dom.iterable.d.ts\",\n    \"lib.webworker.d.ts\",\n    \"lib.webworker.importscripts.d.ts\",\n    \"lib.scripthost.d.ts\",\n    \"lib.es5.d.ts\",\n    \"lib.es6.d.ts\",\n    \"lib.es2015.collection.d.ts\",\n    \"lib.es2015.core.d.ts\",\n    \"lib.es2015.d.ts\",\n    \"lib.es2015.generator.d.ts\",\n    \"lib.es2015.iterable.d.ts\",\n    \"lib.es2015.promise.d.ts\",\n    \"lib.es2015.proxy.d.ts\",\n    \"lib.es2015.reflect.d.ts\",\n    \"lib.es2015.symbol.d.ts\",\n    \"lib.es2015.symbol.wellknown.d.ts\",\n    \"lib.es2016.array.include.d.ts\",\n    \"lib.es2016.d.ts\",\n    \"lib.es2016.full.d.ts\",\n    \"lib.es2017.d.ts\",\n    \"lib.es2017.full.d.ts\",\n    \"lib.es2017.intl.d.ts\",\n    \"lib.es2017.object.d.ts\",\n    \"lib.es2017.sharedmemory.d.ts\",\n    \"lib.es2017.string.d.ts\",\n    \"lib.es2017.typedarrays.d.ts\",\n    \"lib.es2018.asyncgenerator.d.ts\",\n    \"lib.es2018.asynciterable.d.ts\",\n    \"lib.es2018.d.ts\",\n    \"lib.es2018.full.d.ts\",\n    \"lib.es2018.intl.d.ts\",\n    \"lib.es2018.promise.d.ts\",\n    \"lib.es2018.regexp.d.ts\",\n    \"lib.es2019.array.d.ts\",\n    \"lib.es2019.d.ts\",\n    \"lib.es2019.full.d.ts\",\n    \"lib.es2019.object.d.ts\",\n    \"lib.es2019.string.d.ts\",\n    \"lib.es2019.symbol.d.ts\",\n    \"lib.es2020.d.ts\",\n    \"lib.es2020.full.d.ts\",\n    \"lib.es2020.string.d.ts\",\n    \"lib.es2020.symbol.wellknown.d.ts\",\n    \"lib.es2020.bigint.d.ts\",\n    \"lib.es2020.promise.d.ts\",\n    \"lib.es2020.sharedmemory.d.ts\",\n    \"lib.es2020.intl.d.ts\",\n    \"lib.esnext.array.d.ts\",\n    \"lib.esnext.asynciterable.d.ts\",\n    \"lib.esnext.bigint.d.ts\",\n    \"lib.esnext.d.ts\",\n    \"lib.esnext.full.d.ts\",\n    \"lib.esnext.intl.d.ts\",\n    \"lib.esnext.symbol.d.ts\",\n  ]\n\n  const targetToCut = ts.ScriptTarget[target]\n  const matches = files.filter(f => f.startsWith(`lib.${targetToCut.toLowerCase()}`))\n  const targetCutIndex = files.indexOf(matches.pop()!)\n\n  const getMax = (array: number[]) =>\n    array && array.length ? array.reduce((max, current) => (current > max ? current : max)) : undefined\n\n  // Find the index for everything in\n  const indexesForCutting = lib.map(lib => {\n    const matches = files.filter(f => f.startsWith(`lib.${lib.toLowerCase()}`))\n    if (matches.length === 0) return 0\n\n    const cutIndex = files.indexOf(matches.pop()!)\n    return cutIndex\n  })\n\n  const libCutIndex = getMax(indexesForCutting) || 0\n\n  const finalCutIndex = Math.max(targetCutIndex, libCutIndex)\n  return files.slice(0, finalCutIndex + 1)\n}\n\n/**\n * Sets up a Map with lib contents by grabbing the necessary files from\n * the local copy of typescript via the file system.\n */\nexport const createDefaultMapFromNodeModules = (compilerOptions: CompilerOptions, ts?: typeof import(\"typescript\")) => {\n  const tsModule = ts || require(\"typescript\")\n  const path = requirePath()\n  const fs = requireFS()\n\n  const getLib = (name: string) => {\n    const lib = path.dirname(require.resolve(\"typescript\"))\n    return fs.readFileSync(path.join(lib, name), \"utf8\")\n  }\n\n  const libs = knownLibFilesForCompilerOptions(compilerOptions, tsModule)\n  const fsMap = new Map<string, string>()\n  libs.forEach(lib => {\n    fsMap.set(\"/\" + lib, getLib(lib))\n  })\n  return fsMap\n}\n\n/**\n * Adds recursively files from the FS into the map based on the folder\n */\nexport const addAllFilesFromFolder = (map: Map<string, string>, workingDir: string): void => {\n  const path = requirePath()\n  const fs = requireFS()\n\n  const walk = function (dir: string) {\n    let results: string[] = []\n    const list = fs.readdirSync(dir)\n    list.forEach(function (file: string) {\n      file = path.join(dir, file)\n      const stat = fs.statSync(file)\n      if (stat && stat.isDirectory()) {\n        /* Recurse into a subdirectory */\n        results = results.concat(walk(file))\n      } else {\n        /* Is a file */\n        results.push(file)\n      }\n    })\n    return results\n  }\n\n  const allFiles = walk(workingDir)\n\n  allFiles.forEach(lib => {\n    const fsPath = \"/node_modules/@types\" + lib.replace(workingDir, \"\")\n    const content = fs.readFileSync(lib, \"utf8\")\n    const validExtensions = [\".ts\", \".tsx\"]\n\n    if (validExtensions.includes(path.extname(fsPath))) {\n      map.set(fsPath, content)\n    }\n  })\n}\n\n/** Adds all files from node_modules/@types into the FS Map */\nexport const addFilesForTypesIntoFolder = (map: Map<string, string>) =>\n  addAllFilesFromFolder(map, \"node_modules/@types\")\n\n/**\n * Create a virtual FS Map with the lib files from a particular TypeScript\n * version based on the target, Always includes dom ATM.\n *\n * @param options The compiler target, which dictates the libs to set up\n * @param version the versions of TypeScript which are supported\n * @param cache should the values be stored in local storage\n * @param ts a copy of the typescript import\n * @param lzstring an optional copy of the lz-string import\n * @param fetcher an optional replacement for the global fetch function (tests mainly)\n * @param storer an optional replacement for the localStorage global (tests mainly)\n */\nexport const createDefaultMapFromCDN = (\n  options: CompilerOptions,\n  version: string,\n  cache: boolean,\n  ts: TS,\n  lzstring?: typeof import(\"lz-string\"),\n  fetcher?: typeof fetch,\n  storer?: typeof localStorage\n) => {\n  const fetchlike = fetcher || fetch\n  const storelike = storer || localStorage\n  const fsMap = new Map<string, string>()\n  const files = knownLibFilesForCompilerOptions(options, ts)\n  const prefix = `https://typescript.azureedge.net/cdn/${version}/typescript/lib/`\n\n  function zip(str: string) {\n    return lzstring ? lzstring.compressToUTF16(str) : str\n  }\n\n  function unzip(str: string) {\n    return lzstring ? lzstring.decompressFromUTF16(str) : str\n  }\n\n  // Map the known libs to a node fetch promise, then return the contents\n  function uncached() {\n    return Promise.all(files.map(lib => fetchlike(prefix + lib).then(resp => resp.text()))).then(contents => {\n      contents.forEach((text, index) => fsMap.set(\"/\" + files[index], text))\n    })\n  }\n\n  // A localstorage and lzzip aware version of the lib files\n  function cached() {\n    const keys = Object.keys(localStorage)\n    keys.forEach(key => {\n      // Remove anything which isn't from this version\n      if (key.startsWith(\"ts-lib-\") && !key.startsWith(\"ts-lib-\" + version)) {\n        storelike.removeItem(key)\n      }\n    })\n\n    return Promise.all(\n      files.map(lib => {\n        const cacheKey = `ts-lib-${version}-${lib}`\n        const content = storelike.getItem(cacheKey)\n\n        if (!content) {\n          // Make the API call and store the text concent in the cache\n          return fetchlike(prefix + lib)\n            .then(resp => resp.text())\n            .then(t => {\n              storelike.setItem(cacheKey, zip(t))\n              return t\n            })\n        } else {\n          return Promise.resolve(unzip(content))\n        }\n      })\n    ).then(contents => {\n      contents.forEach((text, index) => {\n        const name = \"/\" + files[index]\n        fsMap.set(name, text)\n      })\n    })\n  }\n\n  const func = cache ? cached : uncached\n  return func().then(() => fsMap)\n}\n\nfunction notImplemented(methodName: string): any {\n  throw new Error(`Method '${methodName}' is not implemented.`)\n}\n\nfunction audit<ArgsT extends any[], ReturnT>(\n  name: string,\n  fn: (...args: ArgsT) => ReturnT\n): (...args: ArgsT) => ReturnT {\n  return (...args) => {\n    const res = fn(...args)\n\n    const smallres = typeof res === \"string\" ? res.slice(0, 80) + \"...\" : res\n    debugLog(\"> \" + name, ...args)\n    debugLog(\"< \" + smallres)\n\n    return res\n  }\n}\n\n/** The default compiler options if TypeScript could ever change the compiler options */\nconst defaultCompilerOptions = (ts: typeof import(\"typescript\")): CompilerOptions => {\n  return {\n    ...ts.getDefaultCompilerOptions(),\n    jsx: ts.JsxEmit.React,\n    strict: true,\n    esModuleInterop: true,\n    module: ts.ModuleKind.ESNext,\n    suppressOutputPathCheck: true,\n    skipLibCheck: true,\n    skipDefaultLibCheck: true,\n    moduleResolution: ts.ModuleResolutionKind.NodeJs,\n  }\n}\n\n// \"/DOM.d.ts\" => \"/lib.dom.d.ts\"\nconst libize = (path: string) => path.replace(\"/\", \"/lib.\").toLowerCase()\n\n/**\n * Creates an in-memory System object which can be used in a TypeScript program, this\n * is what provides read/write aspects of the virtual fs\n */\nexport function createSystem(files: Map<string, string>): System {\n  return {\n    args: [],\n    createDirectory: () => notImplemented(\"createDirectory\"),\n    // TODO: could make a real file tree\n    directoryExists: audit(\"directoryExists\", directory => {\n      return Array.from(files.keys()).some(path => path.startsWith(directory))\n    }),\n    exit: () => notImplemented(\"exit\"),\n    fileExists: audit(\"fileExists\", fileName => files.has(fileName) || files.has(libize(fileName))),\n    getCurrentDirectory: () => \"/\",\n    getDirectories: () => [],\n    getExecutingFilePath: () => notImplemented(\"getExecutingFilePath\"),\n    readDirectory: audit(\"readDirectory\", directory => (directory === \"/\" ? Array.from(files.keys()) : [])),\n    readFile: audit(\"readFile\", fileName => files.get(fileName) || files.get(libize(fileName))),\n    resolvePath: path => path,\n    newLine: \"\\n\",\n    useCaseSensitiveFileNames: true,\n    write: () => notImplemented(\"write\"),\n    writeFile: (fileName, contents) => {\n      files.set(fileName, contents)\n    },\n  }\n}\n\n/**\n * Creates a file-system backed System object which can be used in a TypeScript program, you provide\n * a set of virtual files which are prioritised over the FS versions, then a path to the root of your\n * project (basically the folder your node_modules lives)\n */\nexport function createFSBackedSystem(files: Map<string, string>, _projectRoot: string, ts: TS): System {\n  // We need to make an isolated folder for the tsconfig, but also need to be able to resolve the\n  // existing node_modules structures going back through the history\n  const root = _projectRoot + \"/vfs\"\n  const path = requirePath()\n\n  // The default System in TypeScript\n  const nodeSys = ts.sys\n  const tsLib = path.dirname(require.resolve(\"typescript\"))\n\n  return {\n    // @ts-ignore\n    name: \"fs-vfs\",\n    root,\n    args: [],\n    createDirectory: () => notImplemented(\"createDirectory\"),\n    // TODO: could make a real file tree\n    directoryExists: audit(\"directoryExists\", directory => {\n      return Array.from(files.keys()).some(path => path.startsWith(directory)) || nodeSys.directoryExists(directory)\n    }),\n    exit: nodeSys.exit,\n    fileExists: audit(\"fileExists\", fileName => {\n      if (files.has(fileName)) return true\n      // Don't let other tsconfigs end up touching the vfs\n      if (fileName.includes(\"tsconfig.json\") || fileName.includes(\"tsconfig.json\")) return false\n      if (fileName.startsWith(\"/lib\")) {\n        const tsLibName = `${tsLib}/${fileName.replace(\"/\", \"\")}`\n        return nodeSys.fileExists(tsLibName)\n      }\n      return nodeSys.fileExists(fileName)\n    }),\n    getCurrentDirectory: () => root,\n    getDirectories: nodeSys.getDirectories,\n    getExecutingFilePath: () => notImplemented(\"getExecutingFilePath\"),\n    readDirectory: audit(\"readDirectory\", (...args) => {\n      if (args[0] === \"/\") {\n        return Array.from(files.keys())\n      } else {\n        return nodeSys.readDirectory(...args)\n      }\n    }),\n    readFile: audit(\"readFile\", fileName => {\n      if (files.has(fileName)) return files.get(fileName)\n      if (fileName.startsWith(\"/lib\")) {\n        const tsLibName = `${tsLib}/${fileName.replace(\"/\", \"\")}`\n        const result = nodeSys.readFile(tsLibName)\n        if (!result) {\n          const libs = nodeSys.readDirectory(tsLib)\n          throw new Error(\n            `TSVFS: A request was made for ${tsLibName} but there wasn't a file found in the file map. You likely have a mismatch in the compiler options for the CDN download vs the compiler program. Existing Libs: ${libs}.`\n          )\n        }\n        return result\n      }\n      return nodeSys.readFile(fileName)\n    }),\n    resolvePath: path => {\n      if (files.has(path)) return path\n      return nodeSys.resolvePath(path)\n    },\n    newLine: \"\\n\",\n    useCaseSensitiveFileNames: true,\n    write: () => notImplemented(\"write\"),\n    writeFile: (fileName, contents) => {\n      files.set(fileName, contents)\n    },\n  }\n}\n\n/**\n * Creates an in-memory CompilerHost -which is essentially an extra wrapper to System\n * which works with TypeScript objects - returns both a compiler host, and a way to add new SourceFile\n * instances to the in-memory file system.\n */\nexport function createVirtualCompilerHost(sys: System, compilerOptions: CompilerOptions, ts: TS) {\n  const sourceFiles = new Map<string, SourceFile>()\n  const save = (sourceFile: SourceFile) => {\n    sourceFiles.set(sourceFile.fileName, sourceFile)\n    return sourceFile\n  }\n\n  type Return = {\n    compilerHost: CompilerHost\n    updateFile: (sourceFile: SourceFile) => boolean\n  }\n\n  const vHost: Return = {\n    compilerHost: {\n      ...sys,\n      getCanonicalFileName: fileName => fileName,\n      getDefaultLibFileName: () => \"/\" + ts.getDefaultLibFileName(compilerOptions), // '/lib.d.ts',\n      // getDefaultLibLocation: () => '/',\n      getDirectories: () => [],\n      getNewLine: () => sys.newLine,\n      getSourceFile: fileName => {\n        return (\n          sourceFiles.get(fileName) ||\n          save(\n            ts.createSourceFile(\n              fileName,\n              sys.readFile(fileName)!,\n              compilerOptions.target || defaultCompilerOptions(ts).target!,\n              false\n            )\n          )\n        )\n      },\n      useCaseSensitiveFileNames: () => sys.useCaseSensitiveFileNames,\n    },\n    updateFile: sourceFile => {\n      const alreadyExists = sourceFiles.has(sourceFile.fileName)\n      sys.writeFile(sourceFile.fileName, sourceFile.text)\n      sourceFiles.set(sourceFile.fileName, sourceFile)\n      return alreadyExists\n    },\n  }\n  return vHost\n}\n\n/**\n * Creates an object which can host a language service against the virtual file-system\n */\nexport function createVirtualLanguageServiceHost(\n  sys: System,\n  rootFiles: string[],\n  compilerOptions: CompilerOptions,\n  ts: TS,\n  customTransformers?: CustomTransformers\n) {\n  const fileNames = [...rootFiles]\n  const { compilerHost, updateFile } = createVirtualCompilerHost(sys, compilerOptions, ts)\n  const fileVersions = new Map<string, string>()\n  let projectVersion = 0\n  const languageServiceHost: LanguageServiceHost = {\n    ...compilerHost,\n    getProjectVersion: () => projectVersion.toString(),\n    getCompilationSettings: () => compilerOptions,\n    getCustomTransformers: () => customTransformers,\n    getScriptFileNames: () => fileNames,\n    getScriptSnapshot: fileName => {\n      const contents = sys.readFile(fileName)\n      if (contents) {\n        return ts.ScriptSnapshot.fromString(contents)\n      }\n      return\n    },\n    getScriptVersion: fileName => {\n      return fileVersions.get(fileName) || \"0\"\n    },\n    writeFile: sys.writeFile,\n  }\n\n  type Return = {\n    languageServiceHost: LanguageServiceHost\n    updateFile: (sourceFile: import(\"typescript\").SourceFile) => void\n  }\n\n  const lsHost: Return = {\n    languageServiceHost,\n    updateFile: sourceFile => {\n      projectVersion++\n      fileVersions.set(sourceFile.fileName, projectVersion.toString())\n      if (!fileNames.includes(sourceFile.fileName)) {\n        fileNames.push(sourceFile.fileName)\n      }\n      updateFile(sourceFile)\n    },\n  }\n  return lsHost\n}\n\nconst requirePath = () => {\n  return require(String.fromCharCode(112, 97, 116, 104)) as typeof import(\"path\")\n}\n\nconst requireFS = () => {\n  return require(String.fromCharCode(102, 115)) as typeof import(\"fs\")\n}\n","import { TwoslashError } from \"./\"\n\n/** To ensure that errors are matched up right */\nexport function validateCodeForErrors(\n  relevantErrors: import(\"typescript\").Diagnostic[],\n  handbookOptions: { errors: number[] },\n  extension: string,\n  originalCode: string,\n  vfsRoot: string\n) {\n  const inErrsButNotFoundInTheHeader = relevantErrors.filter(e => !handbookOptions.errors.includes(e.code))\n  const errorsFound = Array.from(new Set(inErrsButNotFoundInTheHeader.map(e => e.code))).join(\" \")\n\n  if (inErrsButNotFoundInTheHeader.length) {\n    const errorsToShow = new Set(relevantErrors.map(e => e.code))\n    const codeToAdd = `// @errors: ${Array.from(errorsToShow).join(\" \")}`\n\n    const missing = handbookOptions.errors.length\n      ? `\\nThe existing annotation specified ${handbookOptions.errors.join(\" \")}`\n      : \"\\nExpected: \" + codeToAdd\n\n    // These get filled by below\n    const filesToErrors: Record<string, import(\"typescript\").Diagnostic[]> = {}\n    const noFiles: import(\"typescript\").Diagnostic[] = []\n\n    inErrsButNotFoundInTheHeader.forEach(d => {\n      const fileRef = d.file?.fileName && d.file.fileName.replace(vfsRoot, \"\")\n      if (!fileRef) noFiles.push(d)\n      else {\n        const existing = filesToErrors[fileRef]\n        if (existing) existing.push(d)\n        else filesToErrors[fileRef] = [d]\n      }\n    })\n\n    const showDiagnostics = (title: string, diags: import(\"typescript\").Diagnostic[]) => {\n      return (\n        `${title}\\n  ` +\n        diags\n          .map(e => {\n            const msg = typeof e.messageText === \"string\" ? e.messageText : e.messageText.messageText\n            return `[${e.code}] ${e.start} - ${msg}`\n          })\n          .join(\"\\n  \")\n      )\n    }\n\n    const innerDiags: string[] = []\n    if (noFiles.length) {\n      innerDiags.push(showDiagnostics(\"Ambient Errors\", noFiles))\n    }\n    Object.keys(filesToErrors).forEach(filepath => {\n      innerDiags.push(showDiagnostics(filepath, filesToErrors[filepath]))\n    })\n\n    const allMessages = innerDiags.join(\"\\n\\n\")\n\n    const newErr = new TwoslashError(\n      `Errors were thrown in the sample, but not included in an errors tag`,\n      `These errors were not marked as being expected: ${errorsFound}. ${missing}`,\n      `Compiler Errors:\\n\\n${allMessages}`\n    )\n\n    newErr.code = `## Code\\n\\n'''${extension}\\n${originalCode}\\n'''`\n    throw newErr\n  }\n}\n\n/** Mainly to warn myself, I've lost a good few minutes to this before */\nexport function validateInput(code: string) {\n  if (code.includes(\"// @errors \")) {\n    throw new TwoslashError(\n      `You have '// @errors ' (with a space)`,\n      `You want '// @errors: ' (with a colon)`,\n      `This is a pretty common typo`\n    )\n  }\n\n  if (code.includes(\"// @filename \")) {\n    throw new TwoslashError(\n      `You have '// @filename ' (with a space)`,\n      `You want '// @filename: ' (with a colon)`,\n      `This is a pretty common typo`\n    )\n  }\n}\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = 3768;\nmodule.exports = webpackEmptyContext;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = 3204;\nmodule.exports = webpackEmptyContext;"],"sourceRoot":""}