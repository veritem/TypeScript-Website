{"files":"Include a list of files. This does not support glob patterns, as opposed to `include`.","extends":"Specify one or more path or node module references to base configuration files from which settings are inherited.","include":"Specify a list of modules which to acquire types for.","exclude":"Specify a list of modules which to exclude from type acquisition.","references":"Specify an array of objects that specify paths for projects. Used in project references.","allowUnreachableCode":"Disable error reporting for unreachable code.","allowUnusedLabels":"Disable error reporting for unused labels.","alwaysStrict":"Ensure 'use strict' is always emitted.","exactOptionalPropertyTypes":"Differentiate between undefined and not present when type checking","noFallthroughCasesInSwitch":"Enable error reporting for fallthrough cases in switch statements.","noImplicitAny":"Enable error reporting for expressions and declarations with an implied `any` type..","noImplicitOverride":"Ensure overriding members in derived classes are marked with an override modifier.","noImplicitReturns":"Enable error reporting for codepaths that do not explicitly return in a function.","noImplicitThis":"Enable error reporting when `this` is given the type `any`.","noPropertyAccessFromIndexSignature":"Enforces using indexed accessors for keys declared using an indexed type","noUncheckedIndexedAccess":"Add `undefined` to a type when accessed using an index.","noUnusedLocals":"Enable error reporting when a local variables aren't read.","noUnusedParameters":"Raise an error when a function parameter isn't read","strict":"Enable all strict type checking options.","strictBindCallApply":"Check that the arguments for `bind`, `call`, and `apply` methods match the original function.","strictFunctionTypes":"When assigning functions, check to ensure parameters and the return values are subtype-compatible.","strictNullChecks":"When type checking, take into account `null` and `undefined`.","strictPropertyInitialization":"Check for class properties that are declared but not set in the constructor.","useUnknownInCatchVariables":"Default catch clause variables as `unknown` instead of `any`.","allowUmdGlobalAccess":"假设 UMD 的导入是全局可用的","baseUrl":"为相对路径的模块名设置基准目录","module":"模块代码生成。","moduleResolution":"允许 TypeScript 1.6 的模块解析策略","noResolve":"Disallow `import`s, `require`s or `<reference>`s from expanding the number of files TypeScript should add to a project.","paths":"一组用于寻找模块导入的路径","resolveJsonModule":"Enable importing .json files","rootDir":"设置你源码的根目录。","rootDirs":"设置多个根目录","typeRoots":"TypeScript 应该去哪些路径寻找类型定义","types":"用于创建一个允许包含在编译过程中的类型列表","declaration":"为你工程中的 TypeScript 以及 JavaScript 文件生成 .d.ts 文件。","declarationDir":"Specify the output directory for generated declaration files.","declarationMap":"Create sourcemaps for d.ts files.","downlevelIteration":"为迭代器对象生成更符合要求但更复杂的 JavaScript。","emitBOM":"Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files.","emitDeclarationOnly":"Only output d.ts files and not JavaScript files.","importHelpers":"允许每个项目从 tslib 中导入一次辅助函数，而不是在每个文件中都包含他们。","importsNotUsedAsValues":"Specify emit/checking behavior for imports that are only used for types.","inlineSourceMap":"Include sourcemap files inside the emitted JavaScript.","inlineSources":"Include source code in the sourcemaps inside the emitted JavaScript.","mapRoot":"Specify the location where debugger should locate map files instead of generated locations.","newLine":"Set the newline character for emitting files.","noEmit":"不在编译中生产文件。","noEmitHelpers":"Disable generating custom helper functions like `__extends` in compiled output.","noEmitOnError":"Disable emitting files if any type checking errors are reported.","outDir":"为所有生成的文件设置一个输出目录。","outFile":"将所有输出打包到一个 .js 文件中。如果 `declaration` 为 true 还可以指定一个 .d.ts 文件。","preserveConstEnums":"Disable erasing `const enum` declarations in generated code.","removeComments":"不生成注释。","sourceMap":"为生成的 JavaScript 文件生成 source map 文件。","sourceRoot":"Specify the root path for debuggers to find the reference source code.","stripInternal":"Disable emitting declarations that have `@internal` in their JSDoc comments.","allowJs":"允许你的程序包含 JS 文件。使用 checkJS 来检查在这些文件中的错误。","checkJs":"在经过类型检查的 JavaScript 中报告错误。","maxNodeModuleJsDepth":"Specify the maximum folder depth used for checking JavaScript files from `node_modules`. Only applicable with `allowJs`.","disableSizeLimit":"Remove the 20mb cap on total source code size for JavaScript files in the TypeScript language server.","plugins":"要包含的语言服务插件列表","allowSyntheticDefaultImports":"当模块没有默认导入时，允许 'import x from y'","esModuleInterop":"为了便于支持导入 commonjs 模块生成额外的 JS","forceConsistentCasingInFileNames":"Ensure that casing is correct in imports.","isolatedModules":"确保每个文件都可以不依赖于其他导入而被安全转译。","preserveSymlinks":"不解析符号链接路径","charset":"No longer supported. In early versions, manually set the text encoding for reading files.","keyofStringsOnly":"Make keyof only return strings instead of string, numbers or symbols. Legacy option.","noImplicitUseStrict":"Disable adding 'use strict' directives in emitted JavaScript files.","noStrictGenericChecks":"Disable strict checking of generic signatures in function types.","out":"Deprecated setting. Use `outFile` instead.","suppressExcessPropertyErrors":"Disable reporting of excess property errors during the creation of object literals.","suppressImplicitAnyIndexErrors":"Suppress `noImplicitAny` errors when indexing objects that lack index signatures.","emitDecoratorMetadata":"Emit design-type metadata for decorated declarations in source files.","experimentalDecorators":"Enable experimental support for TC39 stage 2 draft decorators.","jsx":"JSX 代码生成","jsxFactory":"Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'","jsxFragmentFactory":"Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'.","jsxImportSource":"Specify module specifier used to import the JSX factory functions when using `jsx: react-jsx*`.`","lib":"描述目标运行时环境的声明文件列表。","noLib":"Disable including any library files, including the default lib.d.ts.","reactNamespace":"Specify the object invoked for `createElement`. This only applies when targeting `react` JSX emit.","target":"设置生成的 JavaScript 语言的版本，并且会包含兼容的库（环境）的定义。","useDefineForClassFields":"Emit ECMAScript-standard-compliant class fields.","diagnostics":"Output compiler performance information after building.","explainFiles":"Print files read during the compilation including why it was included.","extendedDiagnostics":"Output more detailed compiler performance information after building.","generateCpuProfile":"Emit a v8 CPU profile of the compiler run for debugging.","listEmittedFiles":"Print the names of emitted files after a compilation.","listFiles":"Print all of the files read during the compilation.","traceResolution":"Log paths used during the `moduleResolution` process.","composite":"启用约束以使工程可以引用其他工程来用于构建。","disableReferencedProjectLoad":"Reduce the number of projects loaded automatically by TypeScript.","disableSolutionSearching":"Opt a project out of multi-project reference checking when editing.","disableSourceOfProjectReferenceRedirect":"Disable preferring source files instead of declaration files when referencing composite projects","incremental":"为支持增量编译工程，保存 .tsbuildinfo 文件","tsBuildInfoFile":"为 .tsbuildinfo 增量编译信息指定目录。","noErrorTruncation":"Disable truncating types in error messages.","preserveWatchOutput":"Disable wiping the console in watch mode","pretty":"Enable color and formatting in output to make compiler errors easier to read","skipDefaultLibCheck":"Skip type checking .d.ts files that are included with TypeScript.","skipLibCheck":"Skip type checking all .d.ts files.","assumeChangesOnlyAffectDirectDependencies":"Have recompiles in projects that use `incremental` and `watch` mode assume that changes within a file will only affect files directly depending on it.","watchFile":"Specify how the TypeScript watch mode works.","watchDirectory":"Specify how directories are watched on systems that lack recursive file-watching functionality.","fallbackPolling":"Specify what approach the watcher should use if the system runs out of native file watchers.","synchronousWatchDirectory":"Synchronously call callbacks and update the state of directory watchers on platforms that don`t support recursive watching natively.","excludeDirectories":"Remove a list of directories from the watch process.","excludeFiles":"Remove a list of files from the watch mode's processing.","enable":"Disable the type acquisition for JavaScript projects","disableFilenameBasedTypeAcquisition":"Disables inference for type acquisition by looking at filenames in a project."}