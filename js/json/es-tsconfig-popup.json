{"files":"Include a list of files. This does not support glob patterns, as opposed to `include`.","extends":"Specify one or more path or node module references to base configuration files from which settings are inherited.","include":"Specify a list of modules which to acquire types for.","exclude":"Specify a list of modules which to exclude from type acquisition.","references":"Specify an array of objects that specify paths for projects. Used in project references.","allowUnreachableCode":"Muestra un error cuando el código nunca será ejecutado","allowUnusedLabels":"Muestra un error cuando accidentalmente se crea una notación","alwaysStrict":"Asegura que 'use strict' siempre sea emitido","exactOptionalPropertyTypes":"Differentiate between undefined and not present when type checking","noFallthroughCasesInSwitch":"Enable error reporting for fallthrough cases in switch statements.","noImplicitAny":"Enable error reporting for expressions and declarations with an implied `any` type..","noImplicitOverride":"Ensure overriding members in derived classes are marked with an override modifier.","noImplicitReturns":"Enable error reporting for codepaths that do not explicitly return in a function.","noImplicitThis":"Enable error reporting when `this` is given the type `any`.","noPropertyAccessFromIndexSignature":"Enforces using indexed accessors for keys declared using an indexed type","noUncheckedIndexedAccess":"Add `undefined` to a type when accessed using an index.","noUnusedLocals":"Enable error reporting when a local variables aren't read.","noUnusedParameters":"Raise an error when a function parameter isn't read","strict":"Enable all strict type checking options.","strictBindCallApply":"Check that the arguments for `bind`, `call`, and `apply` methods match the original function.","strictFunctionTypes":"When assigning functions, check to ensure parameters and the return values are subtype-compatible.","strictNullChecks":"When type checking, take into account `null` and `undefined`.","strictPropertyInitialization":"Check for class properties that are declared but not set in the constructor.","useUnknownInCatchVariables":"Default catch clause variables as `unknown` instead of `any`.","allowUmdGlobalAccess":"Asume todas las importaciones UMD como disponibles globalmente","baseUrl":"Configura una URL base para los nombres de los módulos relativos","module":"Specify what module code is generated.","moduleResolution":"Specify how TypeScript looks up a file from a given module specifier.","noResolve":"Disallow `import`s, `require`s or `<reference>`s from expanding the number of files TypeScript should add to a project.","paths":"Specify a set of entries that re-map imports to additional lookup locations.","resolveJsonModule":"Enable importing .json files","rootDir":"Specify the root folder within your source files.","rootDirs":"Allow multiple folders to be treated as one when resolving modules.","typeRoots":"Specify multiple folders that act like `./node_modules/@types`.","types":"Specify type package names to be included without being referenced in a source file.","declaration":"Genera los archivos .d.ts de TypeScript y JavaScript en tu proyecto.","declarationDir":"Especifica el directorio de salida para archivos de declaración generados.","declarationMap":"Crea un mapa de fuente para archivos d.ts","downlevelIteration":"Emit more compliant, but verbose and less performant JavaScript for iteration.","emitBOM":"Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files.","emitDeclarationOnly":"Only output d.ts files and not JavaScript files.","importHelpers":"Allow importing helper functions from tslib once per project, instead of including them per-file.","importsNotUsedAsValues":"Specify emit/checking behavior for imports that are only used for types.","inlineSourceMap":"Include sourcemap files inside the emitted JavaScript.","inlineSources":"Include source code in the sourcemaps inside the emitted JavaScript.","mapRoot":"Specify the location where debugger should locate map files instead of generated locations.","newLine":"Set the newline character for emitting files.","noEmit":"Disable emitting file from a compilation.","noEmitHelpers":"Disable generating custom helper functions like `__extends` in compiled output.","noEmitOnError":"Disable emitting files if any type checking errors are reported.","outDir":"Specify an output folder for all emitted files.","outFile":"Specify a file that bundles all outputs into one JavaScript file. If `declaration` is true, also designates a file that bundles all .d.ts output.","preserveConstEnums":"Disable erasing `const enum` declarations in generated code.","removeComments":"Disable emitting comments.","sourceMap":"Create source map files for emitted JavaScript files.","sourceRoot":"Specify the root path for debuggers to find the reference source code.","stripInternal":"Disable emitting declarations that have `@internal` in their JSDoc comments.","allowJs":"Permite incluir archivos .JS en las importaciones de archivos TypeScript.","checkJs":"Permite el reporte de errores en archivos con extensión de JavaScript","maxNodeModuleJsDepth":"Specify the maximum folder depth used for checking JavaScript files from `node_modules`. Only applicable with `allowJs`.","disableSizeLimit":"Remove the 20mb cap on total source code size for JavaScript files in the TypeScript language server.","plugins":"Specify a list of language service plugins to include.","allowSyntheticDefaultImports":"Permite 'import x from y' cuando un módulo no tiene una exportación por defecto","esModuleInterop":"Emit additional JavaScript to ease support for importing CommonJS modules. This enables `allowSyntheticDefaultImports` for type compatibility.","forceConsistentCasingInFileNames":"Ensure that casing is correct in imports.","isolatedModules":"Ensure that each file can be safely transpiled without relying on other imports.","preserveSymlinks":"Disable resolving symlinks to their realpath. This correlates to the same flag in node.","charset":"Sin soporte. En versiones anteriores, manualmente guarda la codificación del texto para leer archivos.","keyofStringsOnly":"Make keyof only return strings instead of string, numbers or symbols. Legacy option.","noImplicitUseStrict":"Disable adding 'use strict' directives in emitted JavaScript files.","noStrictGenericChecks":"Disable strict checking of generic signatures in function types.","out":"Deprecated setting. Use `outFile` instead.","suppressExcessPropertyErrors":"Disable reporting of excess property errors during the creation of object literals.","suppressImplicitAnyIndexErrors":"Suppress `noImplicitAny` errors when indexing objects that lack index signatures.","emitDecoratorMetadata":"Emit design-type metadata for decorated declarations in source files.","experimentalDecorators":"Enable experimental support for TC39 stage 2 draft decorators.","jsx":"Specify what JSX code is generated.","jsxFactory":"Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'","jsxFragmentFactory":"Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'.","jsxImportSource":"Specify module specifier used to import the JSX factory functions when using `jsx: react-jsx*`.`","lib":"Specify a set of bundled library declaration files that describe the target runtime environment.","noLib":"Disable including any library files, including the default lib.d.ts.","reactNamespace":"Specify the object invoked for `createElement`. This only applies when targeting `react` JSX emit.","target":"Set the JavaScript language version for emitted JavaScript and include compatible library declarations.","useDefineForClassFields":"Emit ECMAScript-standard-compliant class fields.","diagnostics":"Información de rendimiento del compilador después de haber compilado.","explainFiles":"Print files read during the compilation including why it was included.","extendedDiagnostics":"Output more detailed compiler performance information after building.","generateCpuProfile":"Emit a v8 CPU profile of the compiler run for debugging.","listEmittedFiles":"Print the names of emitted files after a compilation.","listFiles":"Print all of the files read during the compilation.","traceResolution":"Log paths used during the `moduleResolution` process.","composite":"Habilita restricciones que permiten a un proyecto de TypeScript ser usado con referencias de proyectos.","disableReferencedProjectLoad":"Reduce the number of projects loaded automatically by TypeScript.","disableSolutionSearching":"Opt a project out of multi-project reference checking when editing.","disableSourceOfProjectReferenceRedirect":"Disable preferring source files instead of declaration files when referencing composite projects","incremental":"Save .tsbuildinfo files to allow for incremental compilation of projects.","tsBuildInfoFile":"Specify the folder for .tsbuildinfo incremental compilation files.","noErrorTruncation":"Disable truncating types in error messages.","preserveWatchOutput":"Disable wiping the console in watch mode","pretty":"Enable color and formatting in output to make compiler errors easier to read","skipDefaultLibCheck":"Skip type checking .d.ts files that are included with TypeScript.","skipLibCheck":"Skip type checking all .d.ts files.","assumeChangesOnlyAffectDirectDependencies":"Una opción de modo de vigilancia drásticamente más rápida, pero ocasionalmente inexacta.","watchFile":"Specify how the TypeScript watch mode works.","watchDirectory":"Specify how directories are watched on systems that lack recursive file-watching functionality.","fallbackPolling":"Specify what approach the watcher should use if the system runs out of native file watchers.","synchronousWatchDirectory":"Synchronously call callbacks and update the state of directory watchers on platforms that don`t support recursive watching natively.","excludeDirectories":"Remove a list of directories from the watch process.","excludeFiles":"Remove a list of files from the watch mode's processing.","enable":"Disable the type acquisition for JavaScript projects","disableFilenameBasedTypeAcquisition":"Disables inference for type acquisition by looking at filenames in a project."}