{"files":"Include a set list of files, does not support globs","extends":"Inherit options for a TSConfig","include":"Specify a list of modules which to acquire types for.","exclude":"Specify a list of modules which to exclude from type acquisition.","references":"Provide a structure for composite projects","allowUnreachableCode":"Error when code will never be called","allowUnusedLabels":"Error when accidentally creating a label","alwaysStrict":"Ensure 'use strict' is always emitted","exactOptionalPropertyTypes":"Differentiate between undefined and not present when type checking","noFallthroughCasesInSwitch":"Report errors for fallthrough cases in switch statements.","noImplicitAny":"Avoid introducing anys inside your codebase when a type could be specified","noImplicitOverride":"Ensure overriding members in derived classes are marked with an override modifier.","noImplicitReturns":"Ensure that all codepaths return in a function","noImplicitThis":"Raise errors when 'this' would be any","noPropertyAccessFromIndexSignature":"Enforces using indexed accessors for keys declared using an indexed type","noUncheckedIndexedAccess":"Add `undefined` to a type when accessed using an index.","noUnusedLocals":"Error when a local variable isn't read","noUnusedParameters":"Error when a parameter isn't used","strict":"Enable TypeScript's most in-depth type checking rules","strictBindCallApply":"Ensure that 'call', 'bind' and 'apply' have the right arguments","strictFunctionTypes":"Ensure that function parameters are consistent","strictNullChecks":"Ensure that nullability is respected in the type checker","strictPropertyInitialization":"Ensure that all class properties match their types after the constructor has finished","useUnknownInCatchVariables":"Default catch clause variables as `unknown` instead of `any`.","allowUmdGlobalAccess":"Assume UMD imports are all globally available","baseUrl":"Set a baseurl for relative module names","module":"Sets the expected module system for your runtime","moduleResolution":"Allow TypeScript 1.6 module resolution strategies","noResolve":"Skip ahead-of-time checking for import and <reference files","paths":"A set of locations to look for imports in","resolveJsonModule":"Allow importing .json files","rootDir":"Sets the root folder within your source files","rootDirs":"Set multiple root directories","typeRoots":"locations where TypeScript should look for type definitions","types":"Used to create an allowlist of types to be included in the compile","declaration":"Emit d.ts files for referenced files in the project","declarationDir":"Set the root directory for d.ts files to go","declarationMap":"Create sourcemaps for d.ts files","downlevelIteration":"Emit more compliant, but verbose JavaScript for iterating objects","emitBOM":"Include a byte order mark to output files","emitDeclarationOnly":"Only output d.ts files and not .js files","importHelpers":"Allow importing helper functions once per project, instead of including them per-file","importsNotUsedAsValues":"Does something","inlineSourceMap":"Include sourcemap files inside the emitted JavaScript","inlineSources":"Include sourcemap files inside the emitted JavaScript","mapRoot":"Set an external root for sourcemaps","newLine":"Set the newline character","noEmit":"Do not emit files from a compilation","noEmitHelpers":"Assume helpers are available in the global runtime","noEmitOnError":"Only emit files on a successful compile","outDir":"Set an output folder for all emitted files","outFile":"Output a single file of all JS files concatenated","preserveConstEnums":"Do not erase `const enum` declarations in generated code","removeComments":"Remove comments in TypeScript from appearing in JavaScript","sourceMap":"Creates source map files for emitted JavaScript files","sourceRoot":"Sets the root path for debuggers to find the reference source code","stripInternal":"Remove declarations which have '@internal' in their JSDoc comments","allowJs":"Let TS include .JS files in imports","checkJs":"Run the type checker on .js files in your project","maxNodeModuleJsDepth":"How deep should TypeScript run type checking in node_modules","disableSizeLimit":"Remove the memory cap on the TypeScript language server","plugins":"A list of language service plugins to include","allowSyntheticDefaultImports":"Allow 'import x from y' when a module doesn't have a default export","esModuleInterop":"Emit additional JS to ease support for importing commonjs modules","forceConsistentCasingInFileNames":"Ensure that casing is correct in imports","isolatedModules":"Ensure that each file can be safely transpiled without relying on other imports","preserveSymlinks":"Do not resolve symlink paths","charset":"Manually set the text encoding for reading files","keyofStringsOnly":"Make keyof only return strings instead of string or numbers","noImplicitUseStrict":"Disable 'use strict' in the JS emit","noStrictGenericChecks":"Disable strict checking of generic signatures in functions.","out":"Do not use this","suppressExcessPropertyErrors":"Allow additional properties being set during creation of types","suppressImplicitAnyIndexErrors":"Remove the warning when using string indexes to access unknown properties","emitDecoratorMetadata":"Adds additional type metadata to decorators in emitted code","experimentalDecorators":"Enable experimental support for TC39 stage 2 decorators","jsx":"Control how JSX is emitted","jsxFactory":"Control the function emitted by JSX","jsxFragmentFactory":"Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'.","jsxImportSource":"Specify module specifier used to import the JSX factory functions when using `jsx: react-jsx*`.`","lib":"Include type definitions you know are available in your JavaScript runtime","noLib":"Ignore options from lib","reactNamespace":"Specify the object which 'createElement' is called on in JSX","target":"Set the supported JavaScript language runtime to transpile to","useDefineForClassFields":"Use define characteristics for handling class fields","diagnostics":"Output additional information after a compile","explainFiles":"Print files read during the compilation including why it was included.","extendedDiagnostics":"Include a lot of diagnostic information after a compile","generateCpuProfile":"Emit a v8 CPU profile of the compiler run for debugging","listEmittedFiles":"Print the names of emitted files after a compile","listFiles":"Print all of the files read during the compilation","traceResolution":"Log out paths when resolving all modules","composite":"Used to create multiple build projects","disableReferencedProjectLoad":"Reduce the number of projects loaded automatically by TypeScript.","disableSolutionSearching":" Opt a project out of multi-project reference checking","disableSourceOfProjectReferenceRedirect":"Use d.ts files as the source of truth for tooling between composite project boundries","incremental":"Save .tsbuildinfo files to allow for incremental compilation of projects","tsBuildInfoFile":"Set the folder for .tsbuildinfo files","noErrorTruncation":"Do not truncate error messages","preserveWatchOutput":"Do not wipe the console in watch mode","pretty":"Use color and formatting to make compiler errors easier to read","skipDefaultLibCheck":"use SkipLibCheck instead","skipLibCheck":"Skip type checking of declaration files","assumeChangesOnlyAffectDirectDependencies":"A drastically faster, but occasionally inaccurate watch mode option.","watchFile":"Specify how the TypeScript watch mode works.","watchDirectory":"Specify how directories are watched on systems that lack recursive file-watching functionality.","fallbackPolling":"What the watcher should use if the system runs out of native file watchers","synchronousWatchDirectory":"Synchronously call callbacks and update the state of directory watchers on platforms that don`t support recursive watching natively.","excludeDirectories":"Remove a list of directories from the watch process.","excludeFiles":"Remove a list of files from the watch mode's processing.","enable":"Disable the type acquisition for JavaScript projects","disableFilenameBasedTypeAcquisition":"Disables inference for type acquisition by looking at filenames in a project."}